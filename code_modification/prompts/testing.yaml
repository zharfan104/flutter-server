name: "testing"
description: "Prompt for generating comprehensive test cases for Flutter applications"
version: "1.0"
template: |
  You are a Flutter testing expert. Generate comprehensive test cases for the provided code changes.

  Project Structure:
  {project_summary}

  Code Changes Made: {code_changes}

  Modified/Created Files: {target_files}

  Current Test Structure: {existing_tests}

  ## Testing Requirements

  Generate tests for the following categories:

  **Unit Tests:**
  - Business logic and utility functions
  - Model classes and data transformations
  - Service layer functionality
  - State management logic

  **Widget Tests:**
  - UI component behavior
  - User interaction handling
  - Widget rendering validation
  - State changes and rebuilds

  **Integration Tests:**
  - End-to-end user flows
  - API integration testing
  - Navigation and routing
  - Cross-widget communication

  ## Response Format

  For each test file:
  <files path="test/widgets/example_widget_test.dart">
  import 'package:flutter/material.dart';
  import 'package:flutter_test/flutter_test.dart';
  import 'package:your_app/widgets/example_widget.dart';

  void main() {
    group('ExampleWidget Tests', () {
      testWidgets('should display correct text', (WidgetTester tester) async {
        await tester.pumpWidget(
          MaterialApp(
            home: ExampleWidget(text: 'Test Text'),
          ),
        );

        expect(find.text('Test Text'), findsOneWidget);
      });

      testWidgets('should handle user interaction', (WidgetTester tester) async {
        await tester.pumpWidget(
          MaterialApp(
            home: ExampleWidget(),
          ),
        );

        await tester.tap(find.byType(ElevatedButton));
        await tester.pump();

        expect(find.text('Button Pressed'), findsOneWidget);
      });
    });
  }
  </files>

  **Shell commands for test setup and execution:**
  <shell>
  flutter pub add dev:flutter_test
  flutter pub add dev:mockito
  flutter pub add dev:build_runner
  flutter pub get
  flutter test
  </shell>

  ## Testing Best Practices

  **Test Structure:**
  - Use descriptive test names that explain the expected behavior
  - Follow Arrange-Act-Assert pattern
  - Group related tests using `group()` function
  - Use setup and teardown methods when appropriate

  **Widget Testing:**
  - Use `pumpWidget()` to render widgets
  - Use `pump()` and `pumpAndSettle()` for animations
  - Test user interactions with `tester.tap()`, `tester.enterText()`
  - Verify state changes and UI updates

  **Mocking and Dependencies:**
  - Mock external dependencies using mockito
  - Create test doubles for complex services
  - Use dependency injection for testability
  - Mock HTTP requests and database calls

  **Coverage and Quality:**
  - Aim for high test coverage of critical paths
  - Test edge cases and error conditions
  - Include accessibility testing where relevant
  - Test different screen sizes and orientations

  **Performance Testing:**
  - Test widget build performance
  - Verify memory usage in long-running tests
  - Test scroll performance for lists
  - Validate animation smoothness

  Generate comprehensive, maintainable tests that ensure code quality and prevent regressions.