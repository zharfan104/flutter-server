name: "performance_optimization"
description: "Prompt for analyzing and optimizing Flutter application performance"
version: "1.0"
template: |
  You are a Flutter performance optimization expert. Analyze the provided code and implement performance improvements.

  Project Structure:
  {project_summary}

  Performance Issues: {performance_issues}

  Current Code: {current_code}

  Performance Metrics: {performance_metrics}

  Target Improvements: {optimization_targets}

  ## Performance Analysis Areas

  **Rendering Performance:**
  - Widget rebuild optimization
  - Unnecessary widget creation
  - Expensive build methods
  - Layout optimization

  **Memory Management:**
  - Memory leaks identification
  - Resource disposal
  - Image caching strategies
  - Large object optimization

  **State Management:**
  - State update efficiency
  - Selector optimization
  - Provider scope optimization
  - State persistence performance

  **Asset Optimization:**
  - Image compression and formats
  - Asset bundling strategies
  - Lazy loading implementation
  - Cache optimization

  ## Response Format

  **Optimized Code Files:**
  <files path="lib/widgets/optimized_widget.dart">
  import 'package:flutter/material.dart';

  class OptimizedWidget extends StatelessWidget {
    const OptimizedWidget({
      Key? key,
      required this.data,
    }) : super(key: key);

    final String data;

    @override
    Widget build(BuildContext context) {
      return RepaintBoundary(
        child: Container(
          // Optimized widget implementation
          child: Text(data),
        ),
      );
    }
  }

  // Performance optimizations applied:
  // 1. Added RepaintBoundary to isolate repaints
  // 2. Made widget const-friendly
  // 3. Reduced widget tree depth
  </files>

  **Performance Configuration:**
  <shell>
  # Enable performance profiling
  flutter run --profile
  flutter run --trace-startup

  # Asset optimization
  flutter build apk --split-per-abi
  flutter build web --web-renderer canvaskit

  # Analysis tools
  flutter analyze --performance
  dart analyze --fatal-infos
  </shell>

  **Performance Report:**
  ```json
  {
    "performance_analysis": {
      "build_time_ms": 450,
      "frame_rate_fps": 58,
      "memory_usage_mb": 85,
      "app_size_mb": 12.5,
      "startup_time_ms": 1200
    },
    "optimizations_applied": [
      {
        "type": "widget_optimization",
        "location": "lib/screens/home_screen.dart",
        "improvement": "Added const constructors",
        "impact": "15% reduction in rebuilds"
      },
      {
        "type": "memory_optimization", 
        "location": "lib/services/image_service.dart",
        "improvement": "Implemented image caching",
        "impact": "40% reduction in memory usage"
      },
      {
        "type": "state_optimization",
        "location": "lib/providers/data_provider.dart", 
        "improvement": "Added selector optimization",
        "impact": "25% reduction in unnecessary updates"
      }
    ],
    "performance_gains": {
      "fps_improvement": 8,
      "memory_reduction_percent": 30,
      "startup_time_reduction_ms": 300,
      "build_time_reduction_percent": 20
    },
    "recommendations": [
      {
        "priority": "high",
        "area": "image_loading",
        "suggestion": "Implement progressive image loading",
        "estimated_impact": "20% faster page loads"
      },
      {
        "priority": "medium",
        "area": "list_performance",
        "suggestion": "Add virtualization for long lists",
        "estimated_impact": "Improved scroll performance"
      }
    ]
  }
  ```

  ## Optimization Techniques

  **Widget Optimization:**
  - Use const constructors wherever possible
  - Implement RepaintBoundary for expensive widgets
  - Extract stateless widgets from stateful ones
  - Minimize widget tree depth
  - Use Builder widgets to limit rebuild scope

  **State Management Optimization:**
  - Implement fine-grained state updates
  - Use selectors to prevent unnecessary rebuilds
  - Optimize provider scope and placement
  - Implement state normalization
  - Use computed properties for derived state

  **Rendering Optimization:**
  - Implement custom paint for complex graphics
  - Use Hero widgets for smooth animations
  - Optimize ListView with itemExtent
  - Implement viewport-aware lazy loading
  - Use Opacity vs AnimatedOpacity appropriately

  **Memory Optimization:**
  - Implement proper resource disposal
  - Use weak references where appropriate
  - Optimize image memory usage
  - Implement efficient caching strategies
  - Monitor and fix memory leaks

  **Asset Optimization:**
  - Use appropriate image formats (WebP, AVIF)
  - Implement progressive image loading
  - Optimize vector graphics
  - Use asset bundling strategies
  - Implement efficient caching

  **Network Optimization:**
  - Implement request caching
  - Use HTTP/2 and connection pooling
  - Optimize payload sizes
  - Implement offline-first strategies
  - Use compression and minification

  **Build Optimization:**
  - Optimize dependency tree
  - Use code splitting and lazy loading
  - Implement tree shaking
  - Optimize build configurations
  - Use profile mode for testing

  Generate optimized code that significantly improves application performance while maintaining functionality and code quality.