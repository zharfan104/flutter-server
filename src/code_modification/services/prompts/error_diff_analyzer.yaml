name: "Error Diff Analyzer"
description: "Analyzes how errors change between recovery attempts to guide strategy"
version: "1.0"
category: "error_recovery"

prompt: |
  You are an expert at analyzing error progression during iterative fixing processes. Your task is to analyze how errors have changed between recovery attempts and provide strategic guidance for the next steps.

  ## Analysis Context
  Session ID: {session_id}
  From Attempt: {from_attempt}
  To Attempt: {to_attempt}
  Analysis Timestamp: {timestamp}

  ## Error State Comparison

  ### Previous State (Attempt {from_attempt})
  Total Errors: {previous_error_count}
  Total Warnings: {previous_warning_count}
  Error Categories: {previous_categories}

  ### Current State (Attempt {to_attempt})
  Total Errors: {current_error_count}
  Total Warnings: {current_warning_count}
  Error Categories: {current_categories}

  ## Change Analysis
  {change_details}

  ## Actions Taken Since Previous Attempt
  Commands Executed: {commands_executed}
  Fixes Applied: {fixes_applied}
  Files Modified: {files_modified}

  ## Strategic Analysis Framework

  ### Progress Indicators
  - **Error Reduction**: Raw count decrease
  - **Category Shifts**: Movement between error types
  - **Fix Effectiveness**: Which actions worked
  - **Regression Detection**: New errors introduced

  ### Success Patterns
  - **Dependency Resolution**: Import errors → Fixed
  - **Code Generation**: Missing .g.dart → Generated
  - **Type Fixes**: Type errors → Corrected
  - **Formatting**: Syntax errors → Cleaned

  ### Failure Patterns
  - **Error Multiplication**: 1 fix → 3 new errors
  - **Category Persistence**: Same error types remain
  - **Fix Resistance**: Repeated failed attempts
  - **Scope Creep**: Expanding error surface

  ## Response Format

  Provide strategic analysis in JSON format:

  ```json
  {{
    "progress_assessment": {{
      "overall_trend": "improving|stable|regressing",
      "error_delta": {{
        "total_change": {current_error_count} - {previous_error_count},
        "percentage_change": "calculated_percentage",
        "direction": "positive|negative|neutral"
      }},
      "category_analysis": {{
        "resolved_categories": ["import_errors", "syntax_errors"],
        "persistent_categories": ["type_errors"],
        "new_categories": ["generated_code_errors"],
        "most_improved": "category_name",
        "most_problematic": "category_name"
      }},
      "progress_score": "0.0_to_1.0_scale",
      "confidence_level": "high|medium|low"
    }},
    "strategy_effectiveness": {{
      "successful_actions": [
        {{
          "action": "flutter pub get",
          "impact": "Resolved 8 import errors",
          "effectiveness": "high"
        }},
        {{
          "action": "build_runner build",
          "impact": "Generated 3 missing .g.dart files",
          "effectiveness": "high"
        }}
      ],
      "ineffective_actions": [
        {{
          "action": "manual type fixes",
          "impact": "Introduced 2 new errors",
          "effectiveness": "low"
        }}
      ],
      "action_recommendations": [
        "Continue dependency-focused approach",
        "Avoid manual type annotations for now",
        "Focus on remaining import errors"
      ]
    }},
    "error_evolution_patterns": {{
      "fixed_errors": [
        {{
          "file": "lib/models/user.dart",
          "line": 15,
          "error": "Target of URI doesn't exist",
          "fix_method": "flutter pub get"
        }}
      ],
      "new_errors": [
        {{
          "file": "lib/services/api.dart",
          "line": 23,
          "error": "Type 'Response' not found",
          "likely_cause": "Missing import after dependency update"
        }}
      ],
      "persistent_errors": [
        {{
          "file": "lib/screens/home.dart",
          "line": 45,
          "error": "Member not found: 'textTheme'",
          "attempts_failed": 2,
          "complexity": "requires manual investigation"
        }}
      ]
    }},
    "next_attempt_strategy": {{
      "recommended_approach": "targeted|aggressive|conservative",
      "priority_focus": [
        "Resolve remaining import errors",
        "Fix type annotation issues",
        "Address persistent errors individually"
      ],
      "recommended_commands": [
        "dart analyze lib/ --verbose",
        "flutter pub deps",
        "dart fix --dry-run"
      ],
      "risk_assessment": {{
        "regression_risk": "low|medium|high",
        "fix_complexity": "simple|moderate|complex",
        "success_probability": "percentage_estimate"
      }}
    }},
    "quality_metrics": {{
      "error_stability": "how_consistent_are_errors",
      "fix_efficiency": "errors_fixed_per_action",
      "regression_rate": "new_errors_per_fix",
      "convergence_indicator": "approaching_solution|diverging|oscillating"
    }},
    "strategic_recommendations": {{
      "continue_current_strategy": true,
      "adjust_approach": [
        "Focus more on automated tools",
        "Reduce manual code changes",
        "Prioritize build system fixes"
      ],
      "escalation_needed": false,
      "fallback_options": [
        "Reset to previous working state",
        "Manual investigation of persistent errors",
        "Gradual fixing approach"
      ]
    }},
    "learning_insights": {{
      "effective_patterns": [
        "Command-based fixes work well for this project",
        "Import errors respond to pub get",
        "Generated code issues need build_runner"
      ],
      "avoidance_patterns": [
        "Manual type fixes cause regressions",
        "Multiple simultaneous changes confuse analysis"
      ],
      "project_characteristics": [
        "Heavy dependency on generated code",
        "Complex import structure",
        "Responsive to build tool commands"
      ]
    }}
  }}
  ```

  ## Analysis Depth Levels

  ### Surface Analysis
  - Raw error count changes
  - Basic category shifts
  - Simple trend identification

  ### Pattern Analysis
  - Error type correlations
  - Fix effectiveness mapping
  - Regression root cause analysis

  ### Strategic Analysis
  - Long-term trend projection
  - Strategy optimization recommendations
  - Risk/benefit assessment

  ### Adaptive Analysis
  - Learning from project characteristics
  - Customized approach recommendations
  - Predictive success modeling

  ## Decision Support Framework

  **Green Light Indicators**: Continue current strategy
  - Consistent error reduction
  - High fix effectiveness
  - Low regression rate
  - Clear progress trend

  **Yellow Light Indicators**: Adjust approach
  - Mixed results
  - Some regressions
  - Plateau in progress
  - Medium complexity errors

  **Red Light Indicators**: Change strategy
  - Error count increasing
  - High regression rate
  - No progress after multiple attempts
  - Strategy clearly not working

  Provide comprehensive error evolution analysis that guides the next recovery attempt with data-driven strategic recommendations.